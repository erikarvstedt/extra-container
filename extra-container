#!/usr/bin/env bash

set -eo pipefail
shopt -s nullglob

# This script uses systemctl, machinectl and nsenter from the existing environment

showHelp() {
    echo "Usage:"
    echo
    echo "extra-container create <container-config-file>"
    echo "                       [--attr|-A attrPath]"
    echo "                       [--nixpkgs-path|--nixos-path path]"
    echo "                       [--start|-s | --restart-changed|-r]"
    echo "                       [--ssh]"
    echo "                       [--build-args arg...]"
    echo
    echo "    <container-config-file> is a NixOS config file with container"
    echo "    definitions like 'containers.mycontainer = { ... }'"
    echo
    echo "    --attr | -A attrPath"
    echo "      Select an attribute from the config expression"
    echo
    echo "    --nixpkgs-path"
    echo "      A nix expression that returns a path to the nixpkgs source"
    echo "      to use for building the containers"
    echo
    echo "    --nixos-path"
    echo "      Like '--nixpkgs-path', but for directly specifying the NixOS source"
    echo
    echo "    --start | -s"
    echo "      Start all created containers"
    echo "      Update running containers that have changed or restart them if '--restart-changed' was specified"
    echo
    echo "    --update-changed | -u"
    echo "      Update running containers with a changed system configuration by running"
    echo "      'switch-to-configuration' inside the container."
    echo "      Restart containers with a changed container configuration"
    echo
    echo "    --restart-changed | -r"
    echo "      Restart running containers that have changed"
    echo
    echo "    --ssh"
    echo "      Generate SSH keys in /tmp and enable container SSH access."
    echo "      The key files remain after exit and are reused on subsequent runs."
    echo "      Unlocks the function 'cssh' in 'extra-container shell'."
    echo "      Requires container option 'privateNetwork = true'."
    echo
    echo "    --build-args arg..."
    echo "      All following args are passed to nix-build."
    echo
    echo "    Example:"
    echo "      extra-container create mycontainers.nix --restart-changed"
    echo
    echo "      extra-container create mycontainers.nix --nixpkgs-path \\"
    echo "        'fetchTarball https://nixos.org/channels/nixos-unstable/nixexprs.tar.xz'"
    echo
    echo "      extra-container create mycontainers.nix --start --build-args --builders 'ssh://worker - - 8'"
    echo
    echo "echo <container-config> | extra-container create"
    echo "    Read the container config from stdin"
    echo
    echo "    Example:"
    echo "      extra-container create --start <<EOF"
    echo "        { containers.hello = { enableTun = true; config = {}; }; }"
    echo "      EOF"
    echo
    echo "extra-container create --expr|-E <container-config>"
    echo "    Provide container config as an argument"
    echo
    echo "extra-container create <store-path>"
    echo "    Create containers from <store-path>/etc"
    echo
    echo "    Examples:"
    echo "      Create from nixos system derivation"
    echo "      extra-container create /nix/store/9h..27-nixos-system-foo-18.03"
    echo
    echo "      Create from nixos etc derivation"
    echo "      extra-container create /nix/store/32..9j-etc"
    echo
    echo "extra-container shell ..."
    echo "    Start a container shell session."
    echo "    See the README for a complete documentation."
    echo "    Supports all arguments from 'create'"
    echo
    echo "    Extra arguments:"
    echo "      --run <cmd> <arg>..."
    echo "        Run command in shell session and exit"
    echo "        Must be the last option given"
    echo "      --no-destroy|-n"
    echo "        Do not destroy shell container before and after running"
    echo "      --destroy|-d"
    echo "        If running inside an existing shell session, force container to"
    echo "        be destroyed before and after running"
    echo
    echo "    Example:"
    echo "      extra-container shell -E '{ containers.demo.config = {}; }'"
    echo
    echo "extra-container build ..."
    echo "    Build the container config and print the resulting NixOS system etc path"
    echo
    echo "    This command can be used like 'create', but options related"
    echo "    to starting are not supported"
    echo
    echo "extra-container list"
    echo "    List all extra containers"
    echo
    echo "extra-container restart <container>..."
    echo "    Fixes the broken restart command of nixos-container (nixpkgs issue #43652)"
    echo
    echo "extra-container destroy <container-name>..."
    echo "    Destroy containers"
    echo
    echo "extra-container destroy <args for create/shell>..."
    echo "    Destroy the containers defined by the args for command \`create\` or \`shell\` (see above)."
    echo "    For this to work, the first arg after \`destroy\` must start with one of the"
    echo "    following three characters: ./-"
    echo
    echo "    Example:"
    echo "      extra-container destroy ./containers.nix"
    echo
    echo "extra-container destroy --all|-a"
    echo "    Destroy all extra containers"
    echo
    echo "extra-container <cmd> <arg>..."
    echo "    All other commands are forwarded to nixos-container"
    exit 0
}

case $1 in
    help|-h|--help)
        showHelp
        ;;
esac

# If a container build output is given ($EXTRA_CONTAINER_ETC) and no command is
# specified in $1, use `shell` as the default command
if [[ $EXTRA_CONTAINER_ETC && ($# == 0 || $1 == -*) ]]; then
    set -- shell "$@"
elif [[ $# == 0 ]]; then
     showHelp
fi

# Run as root if needed
#------------------------------------------------------------------------------

if [[ $EUID != 0 ]]; then
    exec sudo \
         PATH="$PATH" \
         NIX_PATH="$NIX_PATH" \
         EXTRA_CONTAINER_ETC="$EXTRA_CONTAINER_ETC" \
         EXTRA_CONTAINER_ENABLE_CHECK="${EXTRA_CONTAINER_ENABLE_CHECK-}" \
         "${BASH_SOURCE[0]}" "$@"
fi

# Operating system specific setup
#------------------------------------------------------------------------------

errEcho() {
    >&2 echo "$@"
}

[[ -e /run/booted-system/nixos-version ]] && isNixOS=1 || isNixOS=

if [[ $isNixOS ]]; then
    mutableServicesDir=/etc/systemd-mutable/system
else
    # This is the canonical way to check for systemd
    # https://www.freedesktop.org/software/systemd/man/sd_booted.html
    if [[ ! -e /run/systemd/system ]]; then
        errEcho "extra-container requires systemd"
        exit 1
    fi
    if ! type -P machinectl > /dev/null; then
        errEcho "extra-container requires machinectl to be installed"
        exit 1
    fi
    if [[ ! -e /nix/var/nix/profiles/default ]]; then
        errEcho "extra-container requires a multi-user nix installation"
        exit 1
    fi

    mutableServicesDir=/usr/lib/systemd/system

    # For nixos-container on non-NixOS systems https://github.com/NixOS/nix/issues/599#issuecomment-153885553
    # The value of 'LOCALE_ARCHIVE' is inserted by the builder (./default.nix)
    if [[ ! -v LOCALE_ARCHIVE ]]; then
        export LOCALE_ARCHIVE=
    fi

    # Work around https://github.com/NixOS/nixpkgs/issues/28833
    createOsReleaseFile() {
        if [[ ! -f /etc/static/os-release ]]; then
            mkdir -p /etc/static
            echo "# added by extra-container" > /etc/static/os-release
        fi
    }
fi

# Use existing `nixos-container` in PATH by default because on NixOS the container
# install location differs depending on `system.stateVersion` and is hardcoded in
# the `nixos-container` binary.
# See also: function `getInstallDirs`.
if ! type -P nixos-container > /dev/null; then
    PATH=$nixosContainer:$PATH
fi

# Parse and run command
#------------------------------------------------------------------------------

trap 'echo "Error at ${BASH_SOURCE[0]}:$LINENO"' ERR

tmpDir=
onlyBuild=
shell=
list=
restart=
destroy=
cmdDestroy=

start=
check=${EXTRA_CONTAINER_ENABLE_CHECK-}
test=
startShellOnCheckFailure=

case $1 in
    create|add)
        shift
        ;;
    build)
        onlyBuild=1
        shift
        ;;
    shell)
        shell=1
        destroy=1
        shift
        ;;
    test)
        test=1
        check=1
        start=1
        destroy=1
        shift
        ;;
    list)
        list=1
        shift
        ;;
    restart)
        restart=1
        shift
        ;;
    destroy)
        cmdDestroy=1
        shift
        ;;
    *)
        exec nixos-container "$@"
        ;;
esac

# Value is replaced by builder (./default.nix)
evalConfig=$(cd "${BASH_SOURCE[0]%/*}" && pwd)/eval-config.nix

buildContainers() {
    local containerCfg=$1
    local tmpDir=$2
    local nixosPath=$3

    local attrExpr=
    if [[ $attr ]]; then
        attrExpr=".\${''$attr''}"
    fi
    NIX_PATH=$NIX_PATH:pwd=$PWD nix-build --out-link $tmpDir/result "${buildArgs[@]}" -E \
    " let cfg = ($containerCfg)$attrExpr;
      in (import $evalConfig {
         nixosPath = $nixosPath;
         legacyInstallDirs = $legacyInstallDirs;
         systemConfig = cfg;
      }).config.system.build.etc
    " >/dev/null
}

startContainers() {
    if [[ $check ]]; then
        # Start $checkContainer
        check_startContainer
    else
        systemctl start "$@"
    fi
}

restartContainers() {
    local services=$(getServiceNames $*)

    # `systemctl restart <container>` is broken (https://github.com/NixOS/nixpkgs/issues/43652),
    # so use a workaraound
    systemctl stop $services
    # Retry terminating the container machines until the command succeeds
    # or the machines have disappeared
    for ((i = 1;; i++)); do
        local failed=
        local output
        output=$(machinectl terminate $* 2>&1) || failed=1
        if [[ ! $failed || $output == *no*machine*known* ]]; then
            break
        fi
        echo $output
        if ((i == 20)); then
            errEcho "Failed to stop containers."
            exit 1
        fi
        sleep 0.001
    done
    startContainers $services
}

updateContainers() {
    for container in $*; do
        local confFile=$configDirectory/$container.conf
        local systemPath=$(grep -ohP "(?<=^SYSTEM_PATH=).*" $confFile)
        # Shift output 2 spaces to the right
        echo "  Updating $container"
        nixos-container run $container -- bash -lc "${systemPath}/bin/switch-to-configuration test" |& sed 's/^/  /' || true
        echo
    done
}

getContainers() {
    for service in $mutableServicesDir/container@?*.service; do
        getContainerName $service
    done
}

getContainerName() {
    [[ $1 =~ container@(.+)\.service ]]
    echo ${BASH_REMATCH[1]}
}

getServiceNames() {
    for container in $*; do
        echo "container@$container.service "
    done
}

makeGCRootsPath() {
    # Use gcroots/auto instead of gcroots/per-user/root because
    # stale links in per-user are not automatically removed.
    # This avoids cluttering the gcroots dir in case containers
    # are manually removed.
    echo /nix/var/nix/gcroots/auto/extra-container-$1
}

# The key is reused between extra-container sessions
makeSSHKey() {
    local keyDir=/tmp/extra-container-ssh
    sshKey=$keyDir/key
    if [[ ! (-d $keyDir && $(stat -c '%a%U' $keyDir) == 700root &&
                 -f $sshKey && -f $sshKey.pub) ]]; then
        if [[ -e $keyDir ]]; then
            rm -rf $keyDir
        fi
        mkdir -m 700 $keyDir
        ssh-keygen -t ed25519 -P '' -C none -f $sshKey > /dev/null
    fi
    chmod 600 $sshKey
}

makeTmpDir() {
    if [[ ! $tmpDir ]]; then
        tmpDir=$(mktemp -d /tmp/extra-container.XXX)
    fi
}

configDirectory=
getInstallDirs() {
    if [[ ! $configDirectory ]]; then
        nixosContainer=$(type -p nixos-container)
        if grep -q '"/etc/nixos-containers"' "$nixosContainer"; then
            # NixOS ≥22.05
            configDirectory=/etc/nixos-containers
            configDirectoryName=nixos-containers
            otherConfigDirectoryName=containers
            stateDirectory=/var/lib/nixos-containers
            legacyInstallDirs=false
        else
            # NixOS <22.05
            configDirectory=/etc/containers
            configDirectoryName=containers
            otherConfigDirectoryName=nixos-containers
            stateDirectory=/var/lib/containers
            legacyInstallDirs=true
        fi
    fi
}

# This fn is used by commands `create`, `shell`, `destroy`.
# To simplify the implementation, this fn includes the whole arg parsing for commands
# `create`, `shell`. These args are not by `destroy`.
getContainersFromDefinition() {
    update=
    restart=
    ssh=
    containerExpr=
    attr=
    nixpkgsPath=
    nixosPath=
    buildArgs=()
    runCommand=()
    forceDestroy=

    args=()
    while [[ $# > 0 ]]; do
        arg="$1"
        shift
        case $arg in
            --start|-s)
                start=1
                ;;
            --update-changed|-u)
                update=1
                ;;
            --restart-changed|-r)
                restart=1
                ;;
            --check|-c)
                check=1
                ;;
            --debug|-g)
                check=1
                startShellOnCheckFailure=1
                ;;
            --ssh)
                ssh=1
                ;;
            --expr|-E)
                containerExpr="$1"
                shift
                ;;
            --attr|-A)
                attr="$1"
                shift
                ;;
            --nixpkgs-path)
                nixpkgsPath="$1"
                shift
                ;;
            --nixos-path)
                nixosPath="$1"
                shift
                ;;
            --build-args)
                buildArgs=()
                # Add all following args until --run
                while [[ $# > 0 && $1 != --run ]]; do
                    buildArgs+=("$1")
                    shift
                done
                ;;
            --run)
                runCommand=("$@")
                break
                ;;
            --no-destroy|-n)
                destroy=
                ;;
            --destroy|-d)
                destroy=1
                forceDestroy=1
                ;;
            *)
                args+=("$arg")
                ;;
        esac
    done
    set -- "${args[@]}"

    if [[ ! $containerExpr ]]; then
        arg=${1:-}
        shift || true
    fi
    if [[ $# > 0 ]]; then
        errEcho "Error: Unhandled arguments: $*"
        exit 1
    fi

    ## 1. Build containers if needed

    if [[ $ssh ]]; then
        makeSSHKey
    fi
    # This env var is read by ./eval-config.nix while building
    export extraContainerSSH=$ssh

    getInstallDirs

    needToBuildContainers() {
        if [[ $containerExpr ]]; then
            return 0;
        fi
        if [[ $arg ]]; then
            if [[ -f $arg || -e $arg/default.nix ]]; then
                return 0
            fi
        elif [[ ! $EXTRA_CONTAINER_ETC ]]; then
            return 0
        fi
        return 1
    }

    if needToBuildContainers; then
        if [[ ! $containerExpr ]]; then
            if [[ ! $arg || $arg == - ]]; then
                # Read container cfg from stdin
                if [[ $shell ]]; then
                    errEcho "Reading container config from STDIN is not supported for command 'shell'"
                    exit 1
                fi
                read -d '' containerExpr || true
            else
                containerExpr="import ''$(realpath "$arg")''"
            fi
        fi
        if [[ ! $nixosPath ]]; then
            if [[ $nixpkgsPath ]]; then
                nixosPath="\"\${toString ($nixpkgsPath)}/nixos\""
            else
                nixosPath="<nixpkgs/nixos>"
            fi
        fi
        makeTmpDir
        errEcho "Building containers..."
        buildContainers "$containerExpr" $tmpDir "$nixosPath"
        nixosSystemEtc=$tmpDir/result/etc

        if [[ $onlyBuild ]]; then
            realpath $tmpDir/result
            exit 0
        fi
    else
        if [[ $arg ]]; then
            EXTRA_CONTAINER_ETC=$arg
        fi
        if [[ ! $EXTRA_CONTAINER_ETC ]]; then
            errEcho "No containers specified"
            exit 1
        fi
        nixosSystemEtc="$EXTRA_CONTAINER_ETC/etc"
        if [[ ! -e $nixosSystemEtc ]]; then
            errEcho "$nixosSystemEtc doesn't exist"
            exit 1
        fi
    fi

    ## 2. Gather containers

    services=$(echo $nixosSystemEtc/systemd/system/container@?*.service)
    if [[ ! $services ]]; then
        errEcho "No container services in $nixosSystemEtc/systemd/system"
        exit 0
    fi
    allContainers=()
    for service in $services; do
        allContainers+=($(getContainerName $service))
    done
    allContainers=($(printf '%s\n' ${allContainers[@]} | sort))

    if ((${#allContainers[@]} > 1)); then
        if [[ $shell ]]; then
            errEcho "Command 'shell' requires only one container to be defined"
            exit 1
        elif [[ $check ]]; then
            errEcho "'check' mode requires only one container to be defined"
            exit 1
        fi
    fi
}

checkFailed=
atExit() {
    origExitCode=$?
    set +e
    if [[ $test || $checkFailed ]]; then
        errEcho "Destroying container"
        destroyContainers $checkContainer
        if [[ $test && ! $checkFailed ]]; then
            echo
            echo "Success"
        fi
    elif [[ $startShellEnv && $destroy ]]; then
        [[ $runCommand ]] || errEcho "Destroying container"
        destroyContainers $shellContainer
    fi
    if [[ $tmpDir ]]; then
        rm -rf $tmpDir
    fi
    exit $origExitCode
}
trap atExit EXIT

# Command 'list extra containers'
#------------------------------------------------------------------------------

if [[ $list ]]; then
    getContainers
    exit 0
fi

# Command 'restart container'
#------------------------------------------------------------------------------

if [[ $restart ]]; then
    restartContainers $*
    exit 0
fi

# Command 'destroy containers'
#------------------------------------------------------------------------------

systemctlIgnoreNotLoaded() {
    local failed=
    output=$(systemctl "$@" 2>&1) || failed=1
    if [[ $failed ]]; then
        if [[ $output == *not\ loaded* ]]; then
            unitLoaded=
        else
            return 1
        fi
    fi
}

destroyContainers() {
    getInstallDirs

    if [[ ! -e "$configDirectory" ]]; then
        # No containers installed. The containers dir is needed by the code below.
        return
    fi

    local needDaemonReload=

    for container in "$@"; do
        service=container@${container}.service
        serviceFile=${mutableServicesDir}/$service
        confFile="$configDirectory/$container.conf"

        # Signal 'stop' before killing so that the killed container doesn't restart
        local output
        local unitLoaded=1
        if ! systemctlIgnoreNotLoaded stop --no-block $service; then
            errEcho "Stopping $service failed with: $output"
        fi
        if [[ $unitLoaded ]]; then
            if ! systemctlIgnoreNotLoaded kill $service; then
                errEcho "Killing $service failed with: $output"
            fi
        fi

        rm -f "$mutableServicesDir/machines.target.wants/$service"

        if [[ -L $serviceFile ]]; then
            rm $serviceFile
            needDaemonReload=1
        fi
        local gcRootsPath=$(makeGCRootsPath $container)
        rm -f $gcRootsPath
        rm -f $gcRootsPath.conf

        # Remove declarative container confFile, otherwise `nixos-container` fails
        # with 'cannot destroy declarative container'
        rm -f $confFile
        # Create dummy confFile, otherwise `nixos-container` stops before
        # destroying the container completely
        touch $confFile

        # Remove immutable attribute from nested container var/empty files so that
        # the container directory can be deleted
        for varempty in "$stateDirectory"/$container/var/lib/*containers/*/var/empty; do
            chattr -i $varempty
        done

        nixos-container destroy $container || true
    done
    if [[ $needDaemonReload ]]; then
        systemctl daemon-reload
    fi
}

if [[ $cmdDestroy ]]; then
    if  [[ $1 == --all || $1 == -a ]]; then
        getInstallDirs
        containers=($(getContainers))
    # If the first letter of the first arg is one of ./-
    # or no arg is given and EXTRA_CONTAINER_ETC is defined
    elif (($# > 0)) && [[ ${1:0:1} == [./-] ]] || [[ $EXTRA_CONTAINER_ETC ]]; then
        # Get containers to be destroyed from the container definition
        getContainersFromDefinition "$@"
        containers=("${allContainers[@]}")
        echo "Destroying containers:"
        printf '%s\n' "${containers[@]}"
    else
        if (($# == 0)); then
            errEcho "No container name specified"
            exit 1
        fi
        containers=("$@")
    fi

    destroyContainers "${containers[@]}"
    exit 0
fi

# Commands 'create', 'shell'
#------------------------------------------------------------------------------
getContainersFromDefinition "$@"

## Shell and check related setup

startShellEnv=
makeStartInterruptible=
if [[ $shell ]]; then
    shellContainer=${allContainers[0]}

    [[ $shellContainer == $runningShellContainer ]] && insideContainerShell=1 || insideContainerShell=

    if [[ $runCommand || ! $insideContainerShell ]]; then
        startShellEnv=1
    fi
    if [[ $insideContainerShell && ! $forceDestroy ]]; then
        destroy=
    fi
    if [[ $startShellEnv && ! $runCommand ]]; then
        makeStartInterruptible=1
    fi
    if [[ $destroy ]]; then
        destroyContainers $shellContainer
    fi
    start=1
fi

checkContainer=
if [[ $check ]]; then
    checkContainer=${allContainers[0]}
    startSucceeded=
    source check.sh
    if [[ $destroy ]]; then
        destroyContainers $checkContainer
    fi
fi

## 4. Install containers

confWithoutSystem() {
    sed /^SYSTEM_PATH=/d $1
}

isContainerUnchanged() {
    [[ -e $serviceDest && \
       -e $confDest && \
       $(realpath $serviceFile) == $(realpath $serviceDest) ]] || return 1

    if [[ $(realpath $confFile) != $(realpath $confDest) ]]; then
        if [[ $(confWithoutSystem $confFile) == $(confWithoutSystem $confDest) ]]; then
            onlySystemChangedContainers+=($container)
        fi
        return 1
    fi
}

checkInstallationSuccess() {
    if [[ $isNixOS ]]; then
        service=container@$1.service
        # If ExecStart points to the generic 'container_-start' script of the
        # 'container@.service' service template, the installation of the
        # container service file failed.
        if [[ $(systemctl show -p ExecStart $service) == */bin/container_-start*  ]]; then
            errEcho
            errEcho 'Container service installation failed.'
            errEcho 'Please add the following to your NixOS configuration'
            errEcho 'to enable dynamically installing systemd units:'
            errEcho 'boot.extraSystemdUnitPaths = [ "/etc/systemd-mutable/system" ];'
            errEcho
            errEcho 'See also: https://github.com/erikarvstedt/extra-container/#install'
            exit 1
        fi
    fi
}

echo
echo "Installing containers:"

mkdir -p $mutableServicesDir "$configDirectory" /nix/var/nix/gcroots/auto/
if [[ ! $isNixOS ]]; then createOsReleaseFile; fi

changedContainers=()
onlySystemChangedContainers=()
for container in ${allContainers[@]} ; do
    service=container@$container.service
    serviceFile=$nixosSystemEtc/systemd/system/$service
    serviceDest=$mutableServicesDir/$service
    confFile=$nixosSystemEtc/$configDirectoryName/$container.conf
    confDest="$configDirectory/$(basename $confFile)"

    if isContainerUnchanged; then
        echo "$container (unchanged, skipped)"
    else
        echo "$container"
        changedContainers+=($container)

        if [[ ! -e $confFile ]]; then
            alternativeConfFile=$nixosSystemEtc/$otherConfigDirectoryName/$container.conf
            if [[ -e $alternativeConfFile ]]; then
                errEcho
                errEcho    'Error:'
                errEcho    'To be compatible with this container host, the container'
                errEcho -n 'must be built with `legacyInstallDirs = '
                if [[ $legacyInstallDirs == true ]]; then
                    errEcho 'true`.'
                else
                    errEcho 'false` (default).'
                fi
                errEcho
            else
                errEcho "Error: $confFile doesn't exist"
            fi
            exit 1
        fi

        ln -sf $(realpath $serviceFile) $serviceDest
        ln -sf $(realpath $confFile) $confDest
        gcRootsPath=$(makeGCRootsPath $container)
        ln -sf $serviceDest $gcRootsPath
        ln -sf $confDest $gcRootsPath.conf

        if grep -q AUTO_START=1 "$confFile"; then
            wantsDir=$mutableServicesDir/machines.target.wants
            mkdir -p "$wantsDir"
            ln -sfn "../$service" "$wantsDir"
        fi
    fi
done

if [[ $changedContainers ]]; then
    systemctl daemon-reload
    checkInstallationSuccess ${changedContainers[0]}
fi

## 3. Setup shell

if [[ $makeStartInterruptible ]]; then
    # When starting a shell, continue the script when container starting gets interrupted.
    # This way, the user can interrupt waiting for the startup of all services
    # and interact with the starting container.
    trap handleShell SIGINT
fi

handleShell() {
    trap - SIGINT

    export containerIp=$(nixos-container show-ip $shellContainer 2> /dev/null) || containerIp=
    export runningShellContainer=$shellContainer
    export containerStateDirectory=$stateDirectory

    function runInContainer() {
        leader=$(machinectl show "$name" -p Leader | cut -d= -f2)
        if [[ $leader ]]; then
            nsenter -t "$leader" -m -u -i -n -p -- "$@"
        fi
    }

    if [[ $PAGER = cat ]]; then
        # Like extraContainerCmd, but env var PAGER=cat is set
        function extraContainerCmd() {
            if [[ $# > 0 ]]; then
                runInContainer su root -l -c "PAGER=cat exec $(printf "%q " "$@")"
            else
                runInContainer env -i \
                               ${TERM+TERM="$TERM"} \
                               ${COLORTERM+COLORTERM="$COLORTERM"} \
                               ${DISPLAY+DISPLAY="$DISPLAY"} \
                               ${XAUTHORITY+XAUTHORITY="$XAUTHORITY"} \
                               /bin/sh -c '. /etc/set-environment; PAGER=cat exec su root -l --preserve-environment'
            fi
        }
    else
        function extraContainerCmd() {
            if [[ $# > 0 ]]; then
                # behaves exactly like `nixos-container run`
                runInContainer su root -l -c "exec $(printf "%q " "$@")"
            else
                # behaves exactly like `nixos-container root-login`
                runInContainer su root -l
            fi
        }
    fi

    if [[ $extraContainerSSH ]]; then
        makeTmpDir
        export sshKey
        export sshControlPath=$tmpDir/ssh-connection
        extraContainerSSHCmd() {
            ssh -i $sshKey -o ConnectTimeout=2 \
                -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                -o ControlMaster=auto -o ControlPath="$sshControlPath" -o ControlPersist=60 \
                root@$ip "$@"
        }
        export -f extraContainerSSHCmd
    fi

    extraContainerHelp() {
        if [[ $ip ]]; then
            echo "Container address: $ip (\$ip)"
        fi
        echo "Container filesystem: $containerStateDirectory/$name"
        echo
        echo 'Run "c COMMAND" to execute a command in the container'
        echo 'Run "c" to start a shell session inside the container'
        if [[ $extraContainerSSH ]]; then
            echo 'Run "cssh" for SSH'
        fi
    }
    export -f extraContainerCmd runInContainer extraContainerHelp

    defineShortcuts='
      function h() { extraContainerHelp; }
      function c() { extraContainerCmd "$@"; }
      export -f h c
      if [[ $extraContainerSSH ]]; then
        function cssh() { extraContainerSSHCmd "$@"; }
        export -f cssh
      fi
      export name=$runningShellContainer
      export ip=$containerIp
    '

    if [[ $runCommand ]]; then
        eval "$defineShortcuts"
        echo "Running command."
        "${runCommand[0]}" "${runCommand[@]:1}"
    else
        echo 'Starting shell.'
        echo 'Enter "h" for documentation.'
        # Start interactive, non-login shell.
        # Contrary to what is stated in the manual, bash --rcfile sources
        # /etc/profile (and consequently .bashrc) before evaluating the custom rcfile.
        # This allows us to start a shell with prompt and aliases set up and add extra
        # features via --rcfile.
        bash --rcfile <(
            # Prevent aliases from overriding the helper functions
            echo "unalias h c cssh 2>/dev/null; $defineShortcuts"
            # Use PATH from the current calling environment
            printf 'export PATH=%q' "$PATH"
        )
    fi

    # Needed when called from the SIGINT handler
    exit 0
}

## 4. Start/restart containers

echo

if [[ $start || $update || $restart ]]; then
    toStart=()
    toRestart=()
    # systemctl is-active fails when some containers are not active
    statuses=($(systemctl is-active $(getServiceNames ${allContainers[@]}))) || true
    for i in ${!statuses[@]}; do
        if [[ ${statuses[$i]} == active ]]; then
            runningContainers+=(${allContainers[$i]})
        else
            toStart+=(${allContainers[$i]})
        fi
    done

    preStartTimeSec=$(date +%s.%6N)

    if [[ $start && ((${#toStart[@]} != 0)) ]]; then
        echo "Starting containers:"
        printf '%s\n' ${toStart[@]}
        echo
        startContainers $(getServiceNames ${toStart[@]})
    fi

    # Update or restart changed containers that are running
    toRestart=($(comm -12 <(printf '%s\n' ${runningContainers[@]} | sort) \
                          <(printf '%s\n' ${changedContainers[@]})))
    if ((${#toRestart[@]} != 0)); then
        if [[ ! $restart ]]; then
            toUpdate=($(comm -12 <(printf '%s\n' ${toRestart[@]}) \
                                 <(printf '%s\n' ${onlySystemChangedContainers[@]})))
            toRestart=($(comm -23 <(printf '%s\n' ${toRestart[@]}) \
                                  <(printf '%s\n' ${toUpdate[@]})))
            if ((${#toUpdate[@]} != 0)); then
                echo "Updating containers:"
                printf '%s\n' ${toUpdate[@]}
                echo
                updateContainers ${toUpdate[@]}
            fi
        fi
        if ((${#toRestart[@]} != 0)); then
            echo "Restarting containers:"
            printf '%s\n' ${toRestart[@]}
            echo
            restartContainers ${toRestart[@]}
        fi
    fi

    if [[ $check ]]; then
        if [[ $check_containerFinishedStart ]]; then
            echo -n "Container started after "
            echo $(date +%s.%6N) $preStartTimeSec | awk '{printf "%.3f s\n", ($1 - $2)}'
            echo
        fi

        check_runCheckAndPrintResults $preStartTimeSec

        abort() {
            trap - SIGINT
            checkFailed=1
            exit 1
        }

        if [[ $check_foundInvalidUnits && ! $check_foundFailedUnits ]]; then
            abort
        elif [[ $check_foundFailedUnits ]]; then
            checkFailed=1
            if [[ $startShellOnCheckFailure || ($shell && ! $runCommand) ]]; then
                # Start a shell if needed and never run a command
                runCommand=
                if [[ ! $insideContainerShell ]]; then
                    startShellEnv=1
                fi
            else
                abort
            fi
        fi
    fi
fi

if [[ $startShellEnv ]]; then
    handleShell
fi
